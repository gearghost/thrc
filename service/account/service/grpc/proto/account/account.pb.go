// Code generated by protoc-gen-go. DO NOT EDIT.
// source: account.proto

package account // import "."

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type AccountReq struct {
	ID                   string   `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	UserID               string   `protobuf:"bytes,2,opt,name=UserID,proto3" json:"UserID,omitempty"`
	Mobile               string   `protobuf:"bytes,3,opt,name=Mobile,proto3" json:"Mobile,omitempty"`
	Email                string   `protobuf:"bytes,4,opt,name=Email,proto3" json:"Email,omitempty"`
	Salt                 string   `protobuf:"bytes,5,opt,name=Salt,proto3" json:"Salt,omitempty"`
	Password             string   `protobuf:"bytes,6,opt,name=Password,proto3" json:"Password,omitempty"`
	Remark               string   `protobuf:"bytes,7,opt,name=Remark,proto3" json:"Remark,omitempty"`
	CreateTime           string   `protobuf:"bytes,8,opt,name=CreateTime,proto3" json:"CreateTime,omitempty"`
	UpdateTime           string   `protobuf:"bytes,9,opt,name=UpdateTime,proto3" json:"UpdateTime,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AccountReq) Reset()         { *m = AccountReq{} }
func (m *AccountReq) String() string { return proto.CompactTextString(m) }
func (*AccountReq) ProtoMessage()    {}
func (*AccountReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_account_f72330dc6e093f69, []int{0}
}
func (m *AccountReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AccountReq.Unmarshal(m, b)
}
func (m *AccountReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AccountReq.Marshal(b, m, deterministic)
}
func (dst *AccountReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AccountReq.Merge(dst, src)
}
func (m *AccountReq) XXX_Size() int {
	return xxx_messageInfo_AccountReq.Size(m)
}
func (m *AccountReq) XXX_DiscardUnknown() {
	xxx_messageInfo_AccountReq.DiscardUnknown(m)
}

var xxx_messageInfo_AccountReq proto.InternalMessageInfo

func (m *AccountReq) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *AccountReq) GetUserID() string {
	if m != nil {
		return m.UserID
	}
	return ""
}

func (m *AccountReq) GetMobile() string {
	if m != nil {
		return m.Mobile
	}
	return ""
}

func (m *AccountReq) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *AccountReq) GetSalt() string {
	if m != nil {
		return m.Salt
	}
	return ""
}

func (m *AccountReq) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func (m *AccountReq) GetRemark() string {
	if m != nil {
		return m.Remark
	}
	return ""
}

func (m *AccountReq) GetCreateTime() string {
	if m != nil {
		return m.CreateTime
	}
	return ""
}

func (m *AccountReq) GetUpdateTime() string {
	if m != nil {
		return m.UpdateTime
	}
	return ""
}

type AccountResp struct {
	Code                 int32    `protobuf:"varint,1,opt,name=Code,proto3" json:"Code,omitempty"`
	Message              string   `protobuf:"bytes,2,opt,name=Message,proto3" json:"Message,omitempty"`
	Data                 string   `protobuf:"bytes,3,opt,name=Data,proto3" json:"Data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AccountResp) Reset()         { *m = AccountResp{} }
func (m *AccountResp) String() string { return proto.CompactTextString(m) }
func (*AccountResp) ProtoMessage()    {}
func (*AccountResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_account_f72330dc6e093f69, []int{1}
}
func (m *AccountResp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AccountResp.Unmarshal(m, b)
}
func (m *AccountResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AccountResp.Marshal(b, m, deterministic)
}
func (dst *AccountResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AccountResp.Merge(dst, src)
}
func (m *AccountResp) XXX_Size() int {
	return xxx_messageInfo_AccountResp.Size(m)
}
func (m *AccountResp) XXX_DiscardUnknown() {
	xxx_messageInfo_AccountResp.DiscardUnknown(m)
}

var xxx_messageInfo_AccountResp proto.InternalMessageInfo

func (m *AccountResp) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *AccountResp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *AccountResp) GetData() string {
	if m != nil {
		return m.Data
	}
	return ""
}

func init() {
	proto.RegisterType((*AccountReq)(nil), "account.AccountReq")
	proto.RegisterType((*AccountResp)(nil), "account.AccountResp")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// AccountClient is the client API for Account service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AccountClient interface {
	CreateAccount(ctx context.Context, in *AccountReq, opts ...grpc.CallOption) (*AccountResp, error)
	CheckAccountExistByMobile(ctx context.Context, in *AccountReq, opts ...grpc.CallOption) (*AccountResp, error)
	GetIdByMobile(ctx context.Context, in *AccountReq, opts ...grpc.CallOption) (*AccountResp, error)
	GetPasswordByMobile(ctx context.Context, in *AccountReq, opts ...grpc.CallOption) (*AccountResp, error)
	GetPasswordById(ctx context.Context, in *AccountReq, opts ...grpc.CallOption) (*AccountResp, error)
	GetUserIdByID(ctx context.Context, in *AccountReq, opts ...grpc.CallOption) (*AccountResp, error)
	GetAccountByUID(ctx context.Context, in *AccountReq, opts ...grpc.CallOption) (*AccountResp, error)
	GetAccountByMobile(ctx context.Context, in *AccountReq, opts ...grpc.CallOption) (*AccountResp, error)
	UpdateAccountById(ctx context.Context, in *AccountReq, opts ...grpc.CallOption) (*AccountResp, error)
	UpdatePasswdById(ctx context.Context, in *AccountReq, opts ...grpc.CallOption) (*AccountResp, error)
}

type accountClient struct {
	cc *grpc.ClientConn
}

func NewAccountClient(cc *grpc.ClientConn) AccountClient {
	return &accountClient{cc}
}

func (c *accountClient) CreateAccount(ctx context.Context, in *AccountReq, opts ...grpc.CallOption) (*AccountResp, error) {
	out := new(AccountResp)
	err := c.cc.Invoke(ctx, "/account.Account/CreateAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountClient) CheckAccountExistByMobile(ctx context.Context, in *AccountReq, opts ...grpc.CallOption) (*AccountResp, error) {
	out := new(AccountResp)
	err := c.cc.Invoke(ctx, "/account.Account/CheckAccountExistByMobile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountClient) GetIdByMobile(ctx context.Context, in *AccountReq, opts ...grpc.CallOption) (*AccountResp, error) {
	out := new(AccountResp)
	err := c.cc.Invoke(ctx, "/account.Account/GetIdByMobile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountClient) GetPasswordByMobile(ctx context.Context, in *AccountReq, opts ...grpc.CallOption) (*AccountResp, error) {
	out := new(AccountResp)
	err := c.cc.Invoke(ctx, "/account.Account/GetPasswordByMobile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountClient) GetPasswordById(ctx context.Context, in *AccountReq, opts ...grpc.CallOption) (*AccountResp, error) {
	out := new(AccountResp)
	err := c.cc.Invoke(ctx, "/account.Account/GetPasswordById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountClient) GetUserIdByID(ctx context.Context, in *AccountReq, opts ...grpc.CallOption) (*AccountResp, error) {
	out := new(AccountResp)
	err := c.cc.Invoke(ctx, "/account.Account/GetUserIdByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountClient) GetAccountByUID(ctx context.Context, in *AccountReq, opts ...grpc.CallOption) (*AccountResp, error) {
	out := new(AccountResp)
	err := c.cc.Invoke(ctx, "/account.Account/GetAccountByUID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountClient) GetAccountByMobile(ctx context.Context, in *AccountReq, opts ...grpc.CallOption) (*AccountResp, error) {
	out := new(AccountResp)
	err := c.cc.Invoke(ctx, "/account.Account/GetAccountByMobile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountClient) UpdateAccountById(ctx context.Context, in *AccountReq, opts ...grpc.CallOption) (*AccountResp, error) {
	out := new(AccountResp)
	err := c.cc.Invoke(ctx, "/account.Account/UpdateAccountById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountClient) UpdatePasswdById(ctx context.Context, in *AccountReq, opts ...grpc.CallOption) (*AccountResp, error) {
	out := new(AccountResp)
	err := c.cc.Invoke(ctx, "/account.Account/UpdatePasswdById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AccountServer is the server API for Account service.
type AccountServer interface {
	CreateAccount(context.Context, *AccountReq) (*AccountResp, error)
	CheckAccountExistByMobile(context.Context, *AccountReq) (*AccountResp, error)
	GetIdByMobile(context.Context, *AccountReq) (*AccountResp, error)
	GetPasswordByMobile(context.Context, *AccountReq) (*AccountResp, error)
	GetPasswordById(context.Context, *AccountReq) (*AccountResp, error)
	GetUserIdByID(context.Context, *AccountReq) (*AccountResp, error)
	GetAccountByUID(context.Context, *AccountReq) (*AccountResp, error)
	GetAccountByMobile(context.Context, *AccountReq) (*AccountResp, error)
	UpdateAccountById(context.Context, *AccountReq) (*AccountResp, error)
	UpdatePasswdById(context.Context, *AccountReq) (*AccountResp, error)
}

func RegisterAccountServer(s *grpc.Server, srv AccountServer) {
	s.RegisterService(&_Account_serviceDesc, srv)
}

func _Account_CreateAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServer).CreateAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.Account/CreateAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServer).CreateAccount(ctx, req.(*AccountReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Account_CheckAccountExistByMobile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServer).CheckAccountExistByMobile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.Account/CheckAccountExistByMobile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServer).CheckAccountExistByMobile(ctx, req.(*AccountReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Account_GetIdByMobile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServer).GetIdByMobile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.Account/GetIdByMobile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServer).GetIdByMobile(ctx, req.(*AccountReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Account_GetPasswordByMobile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServer).GetPasswordByMobile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.Account/GetPasswordByMobile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServer).GetPasswordByMobile(ctx, req.(*AccountReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Account_GetPasswordById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServer).GetPasswordById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.Account/GetPasswordById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServer).GetPasswordById(ctx, req.(*AccountReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Account_GetUserIdByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServer).GetUserIdByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.Account/GetUserIdByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServer).GetUserIdByID(ctx, req.(*AccountReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Account_GetAccountByUID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServer).GetAccountByUID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.Account/GetAccountByUID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServer).GetAccountByUID(ctx, req.(*AccountReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Account_GetAccountByMobile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServer).GetAccountByMobile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.Account/GetAccountByMobile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServer).GetAccountByMobile(ctx, req.(*AccountReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Account_UpdateAccountById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServer).UpdateAccountById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.Account/UpdateAccountById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServer).UpdateAccountById(ctx, req.(*AccountReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Account_UpdatePasswdById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServer).UpdatePasswdById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.Account/UpdatePasswdById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServer).UpdatePasswdById(ctx, req.(*AccountReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Account_serviceDesc = grpc.ServiceDesc{
	ServiceName: "account.Account",
	HandlerType: (*AccountServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateAccount",
			Handler:    _Account_CreateAccount_Handler,
		},
		{
			MethodName: "CheckAccountExistByMobile",
			Handler:    _Account_CheckAccountExistByMobile_Handler,
		},
		{
			MethodName: "GetIdByMobile",
			Handler:    _Account_GetIdByMobile_Handler,
		},
		{
			MethodName: "GetPasswordByMobile",
			Handler:    _Account_GetPasswordByMobile_Handler,
		},
		{
			MethodName: "GetPasswordById",
			Handler:    _Account_GetPasswordById_Handler,
		},
		{
			MethodName: "GetUserIdByID",
			Handler:    _Account_GetUserIdByID_Handler,
		},
		{
			MethodName: "GetAccountByUID",
			Handler:    _Account_GetAccountByUID_Handler,
		},
		{
			MethodName: "GetAccountByMobile",
			Handler:    _Account_GetAccountByMobile_Handler,
		},
		{
			MethodName: "UpdateAccountById",
			Handler:    _Account_UpdateAccountById_Handler,
		},
		{
			MethodName: "UpdatePasswdById",
			Handler:    _Account_UpdatePasswdById_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "account.proto",
}

func init() { proto.RegisterFile("account.proto", fileDescriptor_account_f72330dc6e093f69) }

var fileDescriptor_account_f72330dc6e093f69 = []byte{
	// 361 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x93, 0x4f, 0x4f, 0xf2, 0x40,
	0x10, 0xc6, 0x5f, 0x78, 0x29, 0x85, 0x21, 0xf8, 0x67, 0x21, 0x66, 0xe5, 0x60, 0x0c, 0x27, 0x4f,
	0x1c, 0xf4, 0x28, 0x51, 0x29, 0x25, 0xd8, 0x03, 0xd1, 0x54, 0xb9, 0x78, 0x5b, 0xe8, 0x44, 0x1b,
	0xc0, 0xd6, 0xee, 0x1a, 0xe5, 0x93, 0xf8, 0x1d, 0xfd, 0x14, 0xa6, 0xb3, 0x5b, 0xc0, 0x78, 0x6a,
	0x6f, 0xf3, 0xfc, 0xa6, 0xf3, 0x74, 0xe7, 0xe9, 0x16, 0x9a, 0x62, 0x3e, 0x8f, 0xde, 0x5f, 0x55,
	0x2f, 0x4e, 0x22, 0x15, 0x31, 0xdb, 0xc8, 0xee, 0x77, 0x09, 0x60, 0xa0, 0x6b, 0x1f, 0xdf, 0xd8,
	0x1e, 0x94, 0x3d, 0x97, 0x97, 0x4e, 0x4b, 0x67, 0x75, 0xbf, 0xec, 0xb9, 0xec, 0x08, 0xaa, 0x53,
	0x89, 0x89, 0xe7, 0xf2, 0x32, 0x31, 0xa3, 0x52, 0x3e, 0x89, 0x66, 0xe1, 0x12, 0xf9, 0x7f, 0xcd,
	0xb5, 0x62, 0x6d, 0xb0, 0x46, 0x2b, 0x11, 0x2e, 0x79, 0x85, 0xb0, 0x16, 0x8c, 0x41, 0xe5, 0x41,
	0x2c, 0x15, 0xb7, 0x08, 0x52, 0xcd, 0x3a, 0x50, 0xbb, 0x17, 0x52, 0x7e, 0x44, 0x49, 0xc0, 0xab,
	0xc4, 0x37, 0x3a, 0x75, 0xf7, 0x71, 0x25, 0x92, 0x05, 0xb7, 0xb5, 0xbb, 0x56, 0xec, 0x04, 0x60,
	0x98, 0xa0, 0x50, 0xf8, 0x18, 0xae, 0x90, 0xd7, 0xa8, 0xb7, 0x43, 0xd2, 0xfe, 0x34, 0x0e, 0xb2,
	0x7e, 0x5d, 0xf7, 0xb7, 0xa4, 0x7b, 0x07, 0x8d, 0xcd, 0xae, 0x32, 0x4e, 0x8f, 0x35, 0x8c, 0x02,
	0xa4, 0x75, 0x2d, 0x9f, 0x6a, 0xc6, 0xc1, 0x9e, 0xa0, 0x94, 0xe2, 0x19, 0xcd, 0xc6, 0x99, 0x4c,
	0x9f, 0x76, 0x85, 0x12, 0x66, 0x61, 0xaa, 0xcf, 0xbf, 0x2c, 0xb0, 0x8d, 0x23, 0xeb, 0x43, 0x53,
	0x1f, 0x25, 0x03, 0xad, 0x5e, 0x96, 0xf9, 0x36, 0xe0, 0x4e, 0xfb, 0x2f, 0x94, 0x71, 0xf7, 0x1f,
	0xbb, 0x85, 0xe3, 0xe1, 0x0b, 0xce, 0x17, 0x86, 0x8e, 0x3e, 0x43, 0xa9, 0x9c, 0xb5, 0x49, 0x35,
	0x97, 0x53, 0x1f, 0x9a, 0x63, 0x54, 0x5e, 0x50, 0x6c, 0xda, 0x81, 0xd6, 0x18, 0x55, 0xf6, 0x25,
	0x8a, 0x79, 0x5c, 0xc1, 0xfe, 0x2f, 0x0f, 0x2f, 0x28, 0xb2, 0x01, 0xdd, 0xb4, 0x74, 0xda, 0x2d,
	0xf2, 0x76, 0xc3, 0x9c, 0xf5, 0x34, 0xef, 0xfc, 0x00, 0xd8, 0xee, 0x7c, 0x91, 0x00, 0x6e, 0xe0,
	0x50, 0xdf, 0xba, 0x8d, 0x4b, 0xde, 0x08, 0xae, 0xe1, 0x40, 0x3b, 0x50, 0x8a, 0xf9, 0x33, 0x74,
	0x1a, 0x4f, 0xf5, 0xde, 0xa5, 0x69, 0xcd, 0xaa, 0xf4, 0xd3, 0x5f, 0xfc, 0x04, 0x00, 0x00, 0xff,
	0xff, 0x53, 0x3b, 0x48, 0x1b, 0x05, 0x04, 0x00, 0x00,
}
